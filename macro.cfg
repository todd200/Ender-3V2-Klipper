######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 X125 Y50 Z80                ; move to servicing position
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-10 F3000                  ; jerk the filament out of the melt zone
   G1 E-50 F1800                  ; retract the rest of the way
   G1 E-10 F900                   ; retract the rest of the way
   M82  

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82

[gcode_macro BED_TRAMMING_1]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  M140 S{BED_TEMP}	
  G28
  M190 S{BED_TEMP}
  SCREWS_TILT_CALCULATE
 
[gcode_macro BED_TRAMMING_2]
gcode:
  SCREWS_TILT_CALCULATE
 
[gcode_macro BED_MESH]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  M140 S{BED_TEMP}
  G28
  M190 S{BED_TEMP}
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
[screws_tilt_adjust]
#Coordinates for ABL Probe over Screw
#For Ender 3 S1, adjust for your printer
horizontal_move_z: 5
screw1: 72,217
screw1_name: Back left
screw2: 252,222
screw2_name: Back Right
screw3: 81,47
screw3_name: Front Left
screw4: 250,50
screw4_name: Front Right


 PID Tune HOTEND and BED

[gcode_macro PIDtuneHOTEND]

gcode:

 {% set TEMP = params.TEMP|default(200)|float %}

 PID_CALIBRATE HEATER=extruder TARGET={210}


[gcode_macro PIDtuneBED]

gcode:

 {% set TEMP = params.TEMP|default(60)|float %}

 PID_CALIBRATE HEATER=heater_bed TARGET={60}

    
  Calibrate BL Touch Z Offset

[gcode_macro BeginTheProbe]

description: start process because I'm forgetful 

gcode:

    G28

    probe_calibrate

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
[gcode_macro DISABLE_STEPPERS]
description: Disables the printers stepper motors
gcode:
  M84 X Y E

 #####################################################################
#   Nozzle Cleaner
#####################################################################    
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 241
variable_start_y: 18
variable_start_z: 1
variable_wipe_dist_y: -15
variable_wipe_qty: 2
variable_wipe_spd: 350
variable_raise_distance: 18

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   #WIPE RIGHT
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z 5
 G1 Y 40
 